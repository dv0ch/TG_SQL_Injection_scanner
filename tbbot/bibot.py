import telebot
from telebot import types
import base_scanner1
import validators
import requests

import constants


bot = telebot.TeleBot(constants.token)
s = requests.Session()


@bot.message_handler(commands=['start'])
def start_func(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    scan = types.KeyboardButton('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    lk = types.KeyboardButton('üóÑüñ•–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    other = types.KeyboardButton('‚û°Ô∏è–î—Ä—É–≥–æ–µ')

    markup.add(scan, lk, other)
    bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!".format(
        message.from_user), reply_markup=markup)


@bot.message_handler(content_types=["text"])
def bot_message(message):
    if message.text == 'üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        lite_scan = types.KeyboardButton('üîç Lite —Å–∫–∞–Ω–Ω–µ—Ä')
        pro_scan = types.KeyboardButton('üîé Pro —Å–∫–∞–Ω–Ω–µ—Ä')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup.add(lite_scan, pro_scan, back)

        bot.send_message(message.from_user.id,
                         "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=markup)

    elif message.text == "üóÑüñ•–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        buttons = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(
            text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', url='https://usnd.to/sPPc3')
        buttons.add(url_button)
        mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
        bot.send_message(message.from_user.id, text=f'<b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, </b> {mention}, \n<a href="URL"><i>https://usnd.to/sPPc3</i></a>',
                         parse_mode="HTML", reply_to_message_id=message.message_id, reply_markup=buttons)

    elif message.text == "‚û°Ô∏è–î—Ä—É–≥–æ–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        sets = types.KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        info = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup.add(sets, info, back)

        bot.send_message(message.from_user.id, "‚û°Ô∏è–î—Ä—É–≥–æ–µ", reply_markup=markup)

    elif message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        bot.send_message(
            message.from_user.id, text="____‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è____ \n–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ - –Ø –ª—é–±–∏–º—ã–π \n–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - 0.1", parse_mode="HTML")

    elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        reg = types.KeyboardButton('üë§–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        osets = types.KeyboardButton('–î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
        back = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup.add(reg, osets, back)

        bot.send_message(message.from_user.id, "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=markup)

    elif message.text == "üë§–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.send_message(message.from_user.id, "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ:")
        bot.send_message(message.from_user.id, str(message.from_user.id))

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        scan = types.KeyboardButton('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
        lk = types.KeyboardButton('üóÑüñ•–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        other = types.KeyboardButton('‚û°Ô∏è–î—Ä—É–≥–æ–µ')

        markup.add(scan, lk, other)
        bot.send_message(message.from_user.id, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", reply_markup=markup)

    elif message.text == "üîç —Å–∫–∞–Ω–Ω–µ—Ä":
        send_url = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ URL-–∞–¥—Ä–µ—Å")
        global send_list
        send_list = [send_url, message.from_user.id]
        bot.register_next_step_handler(send_url, lite_scan_obr)
        print("succesful")


def lite_scan_obr(message):
    try:
        messsage = base_scanner1.crawl_link(message.text)
        bot.send_message(send_list[1], messsage)
    except requests.exceptions.ConnectTimeout:
        bot.send_message(send_list[1], "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞")
    except requests.exceptions.MissingSchema:
        bot.send_message(send_list[1], "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞")
    except requests.exceptions.ConnectionError:
        bot.send_message(send_list[1], "–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    except requests.exceptions.InvalidURL:
        bot.send_message(send_list[1], "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å")

bot.polling(none_stop=True, interval=0)
